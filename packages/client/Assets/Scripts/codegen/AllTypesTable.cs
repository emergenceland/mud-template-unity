/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;
using System.Collections.Generic;
using UnityEngine;

namespace DefaultNamespace
{
    public class AllTypesTableUpdate : TypedRecordUpdate<Tuple<AllTypesTable?, AllTypesTable?>> { }

    public class AllTypesTable : IMudTable
    {
        public readonly static string ID = "AllTypes";
        public static RxTable AllTypesRxTable
        {
            get { return NetworkManager.Datastore.tableNameIndex[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public override Type TableType()
        {
            return typeof(AllTypesTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(AllTypesTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            AllTypesTable other = (AllTypesTable)obj;

            if (other == null)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters) { }

        public override void RecordToTable(RxRecord record)
        {
            var table = record.value;
            //bool hasValues = false;
        }

        public static Tuple<AllTypesTable?, AllTypesTable?> MapUpdates(
            Tuple<Property?, Property?> value
        )
        {
            AllTypesTable? current = null;
            AllTypesTable? previous = null;

            if (value.Item1 != null)
            {
                try
                {
                    current = new AllTypesTable { };
                }
                catch (InvalidCastException)
                {
                    current = new AllTypesTable { };
                }
            }

            if (value.Item2 != null)
            {
                try
                {
                    previous = new AllTypesTable { };
                }
                catch (InvalidCastException)
                {
                    previous = new AllTypesTable { };
                }
            }

            return new Tuple<AllTypesTable?, AllTypesTable?>(current, previous);
        }
    }
}
